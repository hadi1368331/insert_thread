{"html":"\n      <article>\n        <div class=\"header\">\n  \n  <div class=\"headertitle\">\n  <h1 class=\"title\">LEUART - Low Energy UART<\/h1><\/div>\n<\/div><!--header-->\n<div class=\"contents\">\n<a name=\"details\" id=\"details\"><\/a><h2 class=\"groupheader\">Description<\/h2>\n<p>Low Energy Universal Asynchronous Receiver/Transmitter (LEUART) Peripheral API. <\/p>\n<p>This module contains functions to control the LEUART peripheral of Silicon Labs 32-bit MCUs and SoCs. The LEUART module provides the full UART communication using a low frequency 32.768 kHz clock and has special features for communication without the CPU intervention. <\/p>\n<table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"nested-classes\"><\/a>\nData Structures<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">struct &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"http://docs.silabs.com/gecko-platform/4.2/emlib/api/efr32xg12/struct-l-e-u-a-r-t-init-type-def\" class=\"el\" target=\"_blank\">LEUART_Init_TypeDef<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Initialization structure.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table><table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"func-members\"><\/a>\nFunctions<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga0ae6c4ba0d7b1aa02db2c475757b257d\" class=\"el\">LEUART_BaudrateCalc<\/a> (uint32_t refFreq, uint32_t clkdiv)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Calculate the baudrate for the LEUART given reference frequency and clock division.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga41e06e8c961222093afa8997419ee9af\" class=\"el\">LEUART_BaudrateGet<\/a> (LEUART_TypeDef *leuart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Get the current baudrate for LEUART.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gac8d75da0027ebce98cf33ebcdfe9bdad\" class=\"el\">LEUART_BaudrateSet<\/a> (LEUART_TypeDef *leuart, uint32_t refFreq, uint32_t baudrate)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Configure the baudrate (or as close as possible to a specified baudrate).  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaac8ffe82df5bc3b66519380843251228\" class=\"el\">LEUART_Enable<\/a> (LEUART_TypeDef *leuart, <a href=\"#gac19b101f40ce0d0a0920f82abebc129e\" class=\"el\">LEUART_Enable_TypeDef<\/a> enable)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Enable/disable the LEUART receiver and/or transmitter.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga997e11e29be1835b8a49b35b0a2e38a5\" class=\"el\">LEUART_FreezeEnable<\/a> (LEUART_TypeDef *leuart, bool enable)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">LEUART register synchronization freeze control.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga14ed413542c26fb88fd1237f9eb99bd5\" class=\"el\">LEUART_Init<\/a> (LEUART_TypeDef *leuart, <a href=\"http://docs.silabs.com/gecko-platform/4.2/emlib/api/efr32xg12/struct-l-e-u-a-r-t-init-type-def\" class=\"el\" target=\"_blank\">LEUART_Init_TypeDef<\/a> const *init)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Initialize LEUART.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gac1d2e66b6eb2ef53079453ebc2f1e5fa\" class=\"el\">LEUART_Reset<\/a> (LEUART_TypeDef *leuart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Reset LEUART to the same state that it was in after a hardware reset.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint8_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga7e84f260b845b086996737d5c6a3d584\" class=\"el\">LEUART_Rx<\/a> (LEUART_TypeDef *leuart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Receive one 8 bit frame, (or part of 9 bit frame).  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint16_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga41f5c2769d8f3789596111ee6e5e7f3b\" class=\"el\">LEUART_RxExt<\/a> (LEUART_TypeDef *leuart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Receive one 8-9 bit frame with extended information.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga0acc32fe9bb75edec5123e7f155c68ac\" class=\"el\">LEUART_Tx<\/a> (LEUART_TypeDef *leuart, uint8_t data)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Transmit one frame.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaec9893a933f75974c16bd63ac823fd8e\" class=\"el\">LEUART_TxExt<\/a> (LEUART_TypeDef *leuart, uint16_t data)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Transmit one 8-9 bit frame with extended control.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga0e54fd1a0a16f1e899969f29de49674f\" class=\"el\">LEUART_TxDmaInEM2Enable<\/a> (LEUART_TypeDef *leuart, bool enable)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Enables handling of LEUART TX by DMA in EM2.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaf9a622af67512b98926d2117f0ea29d1\" class=\"el\">LEUART_RxDmaInEM2Enable<\/a> (LEUART_TypeDef *leuart, bool enable)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Enables handling of LEUART RX by DMA in EM2.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga19d7637aef9a814ab7670efa676a0976\" class=\"el\">LEUART_IntClear<\/a> (LEUART_TypeDef *leuart, uint32_t flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Clear one or more pending LEUART interrupts.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gace795c6b65f4be874357102793c0a253\" class=\"el\">LEUART_IntDisable<\/a> (LEUART_TypeDef *leuart, uint32_t flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Disable one or more LEUART interrupts.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga53be2b31debdccb0651b09bfbfadf5f9\" class=\"el\">LEUART_IntEnable<\/a> (LEUART_TypeDef *leuart, uint32_t flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Enable one or more LEUART interrupts.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gac40b6a8cbeb05d2a6bcfb45166b2c570\" class=\"el\">LEUART_IntGet<\/a> (LEUART_TypeDef *leuart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Get pending LEUART interrupt flags.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gab429cd67cc5a45c1ea364925d0288198\" class=\"el\">LEUART_IntGetEnabled<\/a> (LEUART_TypeDef *leuart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Get enabled and pending LEUART interrupt flags.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga7dc0f4a3de426741d401d48d233a11ae\" class=\"el\">LEUART_IntSet<\/a> (LEUART_TypeDef *leuart, uint32_t flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Set one or more pending LEUART interrupts from SW.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga414b67a1a068a7d85a09d5ee743e0263\" class=\"el\">LEUART_StatusGet<\/a> (LEUART_TypeDef *leuart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Get LEUART STATUS register.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint8_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga0772a6a6ae118f8643811407b1422412\" class=\"el\">LEUART_RxDataGet<\/a> (LEUART_TypeDef *leuart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Receive one 8 bit frame, (or part of a 9 bit frame).  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint16_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga780258d9b47de7bb45a3a1eeff8b28e1\" class=\"el\">LEUART_RxDataXGet<\/a> (LEUART_TypeDef *leuart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Receive one 8-9 bit frame, with extended information.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table><table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"define-members\"><\/a>\nMacros<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">#define&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gacb3f4d665d8aca8088a1eff6adb7f5f8\" class=\"el\">LEUART_INIT_DEFAULT<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Default configuration for LEUART initialization structure.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table><table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"enum-members\"><\/a>\nEnumerations<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga6bc858472381dd682afb465b3c363111\" class=\"el\">LEUART_Databits_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#gga6bc858472381dd682afb465b3c363111a467e866129b6c15d17c7599fb158b21f\" class=\"el\">leuartDatabits8<\/a> = LEUART_CTRL_DATABITS_EIGHT, \n<br>\n&nbsp;&nbsp;<a href=\"#gga6bc858472381dd682afb465b3c363111ace07f28e25cdfd26f5e307ad9dab4fa7\" class=\"el\">leuartDatabits9<\/a> = LEUART_CTRL_DATABITS_NINE\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Data bit selection.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gac19b101f40ce0d0a0920f82abebc129e\" class=\"el\">LEUART_Enable_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#ggac19b101f40ce0d0a0920f82abebc129ea5458da948a3ff4bfe9ffb0a893cc4c64\" class=\"el\">leuartDisable<\/a> = 0x0, \n<br>\n&nbsp;&nbsp;<a href=\"#ggac19b101f40ce0d0a0920f82abebc129ead058304ad29e701192766cc4e49e1408\" class=\"el\">leuartEnableRx<\/a> = LEUART_CMD_RXEN, \n<br>\n&nbsp;&nbsp;<a href=\"#ggac19b101f40ce0d0a0920f82abebc129ea82e5ffc6c326024c7031e5bf693d0691\" class=\"el\">leuartEnableTx<\/a> = LEUART_CMD_TXEN, \n<br>\n&nbsp;&nbsp;<a href=\"#ggac19b101f40ce0d0a0920f82abebc129eac956ad6908227bfad8d8e6fc8f3a1e28\" class=\"el\">leuartEnable<\/a> = (LEUART_CMD_RXEN | LEUART_CMD_TXEN)\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Enable selection.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga034badf61f0e439ce3a6cf4169f504c0\" class=\"el\">LEUART_Parity_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#gga034badf61f0e439ce3a6cf4169f504c0ab6b56c8573d563f42f28a56c4d0cfde1\" class=\"el\">leuartNoParity<\/a> = LEUART_CTRL_PARITY_NONE, \n<br>\n&nbsp;&nbsp;<a href=\"#gga034badf61f0e439ce3a6cf4169f504c0a1a413b010f3c802d97e02c9ad2a6c59d\" class=\"el\">leuartEvenParity<\/a> = LEUART_CTRL_PARITY_EVEN, \n<br>\n&nbsp;&nbsp;<a href=\"#gga034badf61f0e439ce3a6cf4169f504c0a493c2521d3fab0f83fda35d007045f05\" class=\"el\">leuartOddParity<\/a> = LEUART_CTRL_PARITY_ODD\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Parity selection.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaf748a72c90312181000bd33926390552\" class=\"el\">LEUART_Stopbits_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#ggaf748a72c90312181000bd33926390552ac78d418503337611c07ac11c1550cdb8\" class=\"el\">leuartStopbits1<\/a> = LEUART_CTRL_STOPBITS_ONE, \n<br>\n&nbsp;&nbsp;<a href=\"#ggaf748a72c90312181000bd33926390552ad83a4c3d5dd7a75eef2e627555971240\" class=\"el\">leuartStopbits2<\/a> = LEUART_CTRL_STOPBITS_TWO\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Stop bits selection.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table>\n<h2 class=\"groupheader\">Function Documentation<\/h2>\n<a id=\"ga0ae6c4ba0d7b1aa02db2c475757b257d\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga0ae6c4ba0d7b1aa02db2c475757b257d\">◆&nbsp;<\/a><\/span>LEUART_BaudrateCalc()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t LEUART_BaudrateCalc <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>refFreq, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>clkdiv&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Calculate the baudrate for the LEUART given reference frequency and clock division. <\/p>\n<p>This function returns the baudrate that a LEUART module will use if configured with the given frequency and clock divisor. Notice that this function will not use the hardware configuration. It can be used to determine if a given configuration is sufficiently accurate for the application.<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>refFreq<\/code><\/td><td>The LEUART peripheral frequency used.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>clkdiv<\/code><\/td><td>The clock division factor to be used.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>A baudrate with given settings. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga41e06e8c961222093afa8997419ee9af\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga41e06e8c961222093afa8997419ee9af\">◆&nbsp;<\/a><\/span>LEUART_BaudrateGet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t LEUART_BaudrateGet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Get the current baudrate for LEUART. <\/p>\n<p>This function returns the actual baudrate (not considering the oscillator inaccuracies) used by the LEUART peripheral.<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>A pointer to the LEUART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>The current baudrate. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gac8d75da0027ebce98cf33ebcdfe9bdad\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gac8d75da0027ebce98cf33ebcdfe9bdad\">◆&nbsp;<\/a><\/span>LEUART_BaudrateSet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_BaudrateSet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>refFreq, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>baudrate&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Configure the baudrate (or as close as possible to a specified baudrate). <\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>The baudrate setting requires synchronization into the low-frequency domain. If the same register is modified before a previous update has completed, this function will stall until the previous synchronization has completed.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>A pointer to the LEUART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>refFreq<\/code><\/td><td>The LEUART reference clock frequency in Hz that will be used. If set to 0, the currently configured reference clock is assumed.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>baudrate<\/code><\/td><td>A baudrate to try to achieve for LEUART. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaac8ffe82df5bc3b66519380843251228\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaac8ffe82df5bc3b66519380843251228\">◆&nbsp;<\/a><\/span>LEUART_Enable()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_Enable <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#gac19b101f40ce0d0a0920f82abebc129e\" class=\"el\">LEUART_Enable_TypeDef<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>enable&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Enable/disable the LEUART receiver and/or transmitter. <\/p>\n<p>Notice that this function does not do any configuration. Enabling should normally be done after the initialization is done (if not enabled as part of initialization).<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Enabling/disabling requires synchronization into the low-frequency domain. If the same register is modified before a previous update has completed, this function will stall until the previous synchronization has completed.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>A pointer to the LEUART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>enable<\/code><\/td><td>Select status for receiver/transmitter. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga997e11e29be1835b8a49b35b0a2e38a5\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga997e11e29be1835b8a49b35b0a2e38a5\">◆&nbsp;<\/a><\/span>LEUART_FreezeEnable()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_FreezeEnable <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">bool&nbsp;<\/td>\n          <td class=\"paramname\"><code>enable&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>LEUART register synchronization freeze control. <\/p>\n<p>Some LEUART registers require synchronization into the low-frequency (LF) domain. The freeze feature allows for several such registers to be modified before passing them to the LF domain simultaneously (which takes place when the freeze mode is disabled).<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>When enabling freeze mode, this function will wait for all current ongoing LEUART synchronization to the LF domain to complete (Normally synchronization will not be in progress.) However, for this reason, when using freeze mode, modifications of registers requiring LF synchronization should be done within one freeze enable/disable block to avoid unnecessary stalling.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>A pointer to the LEUART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>enable<\/code><\/td><td><ul>\n<li>True - enable freeze, modified registers are not propagated to the LF domain <\/li>\n<li>False - disables freeze, modified registers are propagated to the LF domain <\/li>\n<\/ul>\n<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga14ed413542c26fb88fd1237f9eb99bd5\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga14ed413542c26fb88fd1237f9eb99bd5\">◆&nbsp;<\/a><\/span>LEUART_Init()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_Init <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"http://docs.silabs.com/gecko-platform/4.2/emlib/api/efr32xg12/struct-l-e-u-a-r-t-init-type-def\" class=\"el\" target=\"_blank\">LEUART_Init_TypeDef<\/a> const *&nbsp;<\/td>\n          <td class=\"paramname\"><code>init&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Initialize LEUART. <\/p>\n<p>This function will configure basic settings to operate in normal asynchronous mode. Consider using <a href=\"#gac1d2e66b6eb2ef53079453ebc2f1e5fa\" class=\"el\" title=\"Reset LEUART to the same state that it was in after a hardware reset.\">LEUART_Reset()<\/a> prior to this function if the state of configuration is not known, since only configuration settings specified by <code>init<\/code> are set.<\/p>\n<p>Special control setup not covered by this function may be done either before or after using this function (but normally before enabling) by direct modification of the CTRL register.<\/p>\n<p>Notice that pins used by the LEUART module must be properly configured by the user explicitly for the LEUART to work as intended. (When configuring pins consider the sequence of configuration to avoid unintended pulses/glitches on output pins.)<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Initializing requires synchronization into the low-frequency domain. If the same register is modified before a previous update has completed, this function will stall until the previous synchronization has completed.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>A pointer to the LEUART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>init<\/code><\/td><td>A pointer to the initialization structure used to configure basic async setup. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gac1d2e66b6eb2ef53079453ebc2f1e5fa\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gac1d2e66b6eb2ef53079453ebc2f1e5fa\">◆&nbsp;<\/a><\/span>LEUART_Reset()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_Reset <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Reset LEUART to the same state that it was in after a hardware reset. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>A pointer to the LEUART peripheral register block. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga7e84f260b845b086996737d5c6a3d584\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga7e84f260b845b086996737d5c6a3d584\">◆&nbsp;<\/a><\/span>LEUART_Rx()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint8_t LEUART_Rx <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Receive one 8 bit frame, (or part of 9 bit frame). <\/p>\n<p>This function is normally used to receive one frame when operating with frame length 8 bits. See <a href=\"#ga41f5c2769d8f3789596111ee6e5e7f3b\" class=\"el\" title=\"Receive one 8-9 bit frame with extended information.\">LEUART_RxExt()<\/a> for reception of 9 bit frames.<\/p>\n<p>Notice that possible parity/stop bits are not considered a part of the specified frame bit length.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if the buffer is empty until data is received.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>A pointer to the LEUART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga41f5c2769d8f3789596111ee6e5e7f3b\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga41f5c2769d8f3789596111ee6e5e7f3b\">◆&nbsp;<\/a><\/span>LEUART_RxExt()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint16_t LEUART_RxExt <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Receive one 8-9 bit frame with extended information. <\/p>\n<p>This function is normally used to receive one frame and additional RX status information is required.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if buffer is empty until data is received.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>A pointer to the LEUART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga0acc32fe9bb75edec5123e7f155c68ac\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga0acc32fe9bb75edec5123e7f155c68ac\">◆&nbsp;<\/a><\/span>LEUART_Tx()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_Tx <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>data&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Transmit one frame. <\/p>\n<p>Depending on the frame length configuration, 8 (least significant) bits from <code>data<\/code> are transmitted. If the frame length is 9, 8 bits are transmitted from <code>data<\/code> and one bit as specified by the CTRL register, BIT8DV field. See <a href=\"#gaec9893a933f75974c16bd63ac823fd8e\" class=\"el\" title=\"Transmit one 8-9 bit frame with extended control.\">LEUART_TxExt()<\/a> for transmitting 9 bit frame with full control of all 9 bits.<\/p>\n<p>Notice that possible parity/stop bits in asynchronous mode are not considered a part of the specified frame bit length.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if buffer is full until the buffer becomes available.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>A pointer to the LEUART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>data<\/code><\/td><td>Data to transmit. See details above for more info. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaec9893a933f75974c16bd63ac823fd8e\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaec9893a933f75974c16bd63ac823fd8e\">◆&nbsp;<\/a><\/span>LEUART_TxExt()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_TxExt <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>data&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Transmit one 8-9 bit frame with extended control. <\/p>\n<p>Notice that possible parity/stop bits in asynchronous mode are not considered a part of the specified frame bit length.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if the buffer is full until the buffer becomes available.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>A pointer to the LEUART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>data<\/code><\/td><td>Data to transmit with extended control. Least significant bit contains frame bits and additional control bits are available as documented in the reference manual (set to 0 if not used). <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga0e54fd1a0a16f1e899969f29de49674f\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga0e54fd1a0a16f1e899969f29de49674f\">◆&nbsp;<\/a><\/span>LEUART_TxDmaInEM2Enable()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_TxDmaInEM2Enable <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">bool&nbsp;<\/td>\n          <td class=\"paramname\"><code>enable&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Enables handling of LEUART TX by DMA in EM2. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>A pointer to the LEUART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>enable<\/code><\/td><td>True - enables functionality False - disables functionality <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaf9a622af67512b98926d2117f0ea29d1\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaf9a622af67512b98926d2117f0ea29d1\">◆&nbsp;<\/a><\/span>LEUART_RxDmaInEM2Enable()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_RxDmaInEM2Enable <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">bool&nbsp;<\/td>\n          <td class=\"paramname\"><code>enable&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Enables handling of LEUART RX by DMA in EM2. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>A pointer to the LEUART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>enable<\/code><\/td><td>True - enables functionality False - disables functionality <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga19d7637aef9a814ab7670efa676a0976\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga19d7637aef9a814ab7670efa676a0976\">◆&nbsp;<\/a><\/span>LEUART_IntClear()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_IntClear <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Clear one or more pending LEUART interrupts. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>Pointer to LEUART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>flags<\/code><\/td><td>Pending LEUART interrupt source to clear. Use a bitwise logic OR combination of valid interrupt flags for LEUART module (LEUART_IF_nnn). <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gace795c6b65f4be874357102793c0a253\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gace795c6b65f4be874357102793c0a253\">◆&nbsp;<\/a><\/span>LEUART_IntDisable()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_IntDisable <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Disable one or more LEUART interrupts. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>Pointer to LEUART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>flags<\/code><\/td><td>LEUART interrupt sources to disable. Use a bitwise logic OR combination of valid interrupt flags for LEUART module (LEUART_IF_nnn). <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga53be2b31debdccb0651b09bfbfadf5f9\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga53be2b31debdccb0651b09bfbfadf5f9\">◆&nbsp;<\/a><\/span>LEUART_IntEnable()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_IntEnable <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Enable one or more LEUART interrupts. <\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Depending on the use, a pending interrupt may already be set prior to enabling the interrupt. To ignore a pending interrupt, consider using <a href=\"#ga19d7637aef9a814ab7670efa676a0976\" class=\"el\" title=\"Clear one or more pending LEUART interrupts.\">LEUART_IntClear()<\/a> prior to enabling the interrupt.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>Pointer to LEUART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>flags<\/code><\/td><td>LEUART interrupt sources to enable. Use a bitwise logic OR combination of valid interrupt flags for LEUART module (LEUART_IF_nnn). <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gac40b6a8cbeb05d2a6bcfb45166b2c570\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gac40b6a8cbeb05d2a6bcfb45166b2c570\">◆&nbsp;<\/a><\/span>LEUART_IntGet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t LEUART_IntGet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Get pending LEUART interrupt flags. <\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>The event bits are not cleared by the use of this function.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>Pointer to LEUART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>LEUART interrupt sources pending. A bitwise logic OR combination of valid interrupt flags for LEUART module (LEUART_IF_nnn). <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gab429cd67cc5a45c1ea364925d0288198\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gab429cd67cc5a45c1ea364925d0288198\">◆&nbsp;<\/a><\/span>LEUART_IntGetEnabled()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t LEUART_IntGetEnabled <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Get enabled and pending LEUART interrupt flags. <\/p>\n<p>Useful for handling more interrupt sources in the same interrupt handler.<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>Pointer to LEUART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Interrupt flags are not cleared by the use of this function.<\/dd><\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Pending and enabled LEUART interrupt sources. The return value is the bitwise AND combination of<ul>\n<li>the OR combination of enabled interrupt sources in LEUARTx_IEN_nnn register (LEUARTx_IEN_nnn) and<\/li>\n<li>the OR combination of valid interrupt flags of LEUART module (LEUARTx_IF_nnn). <\/li>\n<\/ul>\n<\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga7dc0f4a3de426741d401d48d233a11ae\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga7dc0f4a3de426741d401d48d233a11ae\">◆&nbsp;<\/a><\/span>LEUART_IntSet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void LEUART_IntSet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Set one or more pending LEUART interrupts from SW. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>Pointer to LEUART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>flags<\/code><\/td><td>LEUART interrupt sources to set to pending. Use a bitwise logic OR combination of valid interrupt flags for LEUART module (LEUART_IF_nnn). <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga414b67a1a068a7d85a09d5ee743e0263\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga414b67a1a068a7d85a09d5ee743e0263\">◆&nbsp;<\/a><\/span>LEUART_StatusGet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t LEUART_StatusGet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Get LEUART STATUS register. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>Pointer to LEUART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>STATUS register value. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga0772a6a6ae118f8643811407b1422412\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga0772a6a6ae118f8643811407b1422412\">◆&nbsp;<\/a><\/span>LEUART_RxDataGet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint8_t LEUART_RxDataGet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Receive one 8 bit frame, (or part of a 9 bit frame). <\/p>\n<p>Used to quickly receive one 8 bit frame by reading RXDATA register directly, without checking STATUS register for RXDATAV flag. This can be useful from RXDATAV interrupt handler, i.e., waiting is superfluous, in order to quickly read received data. Please refer to <a href=\"#ga780258d9b47de7bb45a3a1eeff8b28e1\" class=\"el\">LEUART_RxDataXGet()<\/a> for reception of 9 bit frames.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Since this function does not check if the RXDATA register actually holds valid data, it should only be used in situations when it is certain that there is valid data, ensured by some external program routine, e.g., when handling an RXDATAV interrupt. The <a href=\"#ga7e84f260b845b086996737d5c6a3d584\" class=\"el\">LEUART_Rx()<\/a> is normally a better choice if the validity of the RXDATA register is not certain.<\/dd>\n<dd>\nNotice that possible parity/stop bits are not considered part of specified frame bit length.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>Pointer to LEUART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga780258d9b47de7bb45a3a1eeff8b28e1\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga780258d9b47de7bb45a3a1eeff8b28e1\">◆&nbsp;<\/a><\/span>LEUART_RxDataXGet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint16_t LEUART_RxDataXGet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">LEUART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>leuart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Receive one 8-9 bit frame, with extended information. <\/p>\n<p>Used to quickly receive one 8-9 bit frame with extended information by reading RXDATAX register directly, without checking STATUS register for RXDATAV flag. This can be useful from RXDATAV interrupt handler, i.e., waiting is superfluous, in order to quickly read received data.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Since this function does not check if the RXDATAX register actually holds valid data, it should only be used in situations when it is certain that there is valid data, ensured by some external program routine, e.g., when handling an RXDATAV interrupt. The <a href=\"#ga41f5c2769d8f3789596111ee6e5e7f3b\" class=\"el\">LEUART_RxExt()<\/a> is normally a better choice if the validity of the RXDATAX register is not certain.<\/dd>\n<dd>\nNotice that possible parity/stop bits are not considered part of specified frame bit length.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>leuart<\/code><\/td><td>Pointer to LEUART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<h2 class=\"groupheader\">Macro Definition Documentation<\/h2>\n<a id=\"gacb3f4d665d8aca8088a1eff6adb7f5f8\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gacb3f4d665d8aca8088a1eff6adb7f5f8\">◆&nbsp;<\/a><\/span>LEUART_INIT_DEFAULT<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">#define LEUART_INIT_DEFAULT<\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n<b>Value:<\/b><div class=\"fragment\"><div class=\"line\">  {                                                                                         \\<\/div>\n<div class=\"line\">    leuartEnable,    <span class=\"comment\">/* Enable RX/TX when initialization completed. */<\/span>                      \\<\/div>\n<div class=\"line\">    0,               <span class=\"comment\">/* Use current configured reference clock for configuring baud rate.*/<\/span> \\<\/div>\n<div class=\"line\">    9600,            <span class=\"comment\">/* 9600 bits/s. */<\/span>                                                     \\<\/div>\n<div class=\"line\">    leuartDatabits8, <span class=\"comment\">/* 8 data bits. */<\/span>                                                     \\<\/div>\n<div class=\"line\">    leuartNoParity,  <span class=\"comment\">/* No parity. */<\/span>                                                       \\<\/div>\n<div class=\"line\">    leuartStopbits1  <span class=\"comment\">/* 1 stop bit. */<\/span>                                                      \\<\/div>\n<div class=\"line\">  }<\/div>\n<\/div><!-- fragment -->\n<p>Default configuration for LEUART initialization structure. <\/p>\n\n<\/div>\n<\/div>\n<h2 class=\"groupheader\">Enumeration Type Documentation<\/h2>\n<a id=\"ga6bc858472381dd682afb465b3c363111\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga6bc858472381dd682afb465b3c363111\">◆&nbsp;<\/a><\/span>LEUART_Databits_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#ga6bc858472381dd682afb465b3c363111\" class=\"el\">LEUART_Databits_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Data bit selection. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"gga6bc858472381dd682afb465b3c363111a467e866129b6c15d17c7599fb158b21f\"><\/a>leuartDatabits8&nbsp;<\/td><td class=\"fielddoc\"><p>8 data bits. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga6bc858472381dd682afb465b3c363111ace07f28e25cdfd26f5e307ad9dab4fa7\"><\/a>leuartDatabits9&nbsp;<\/td><td class=\"fielddoc\"><p>9 data bits. <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<a id=\"gac19b101f40ce0d0a0920f82abebc129e\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gac19b101f40ce0d0a0920f82abebc129e\">◆&nbsp;<\/a><\/span>LEUART_Enable_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#gac19b101f40ce0d0a0920f82abebc129e\" class=\"el\">LEUART_Enable_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Enable selection. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"ggac19b101f40ce0d0a0920f82abebc129ea5458da948a3ff4bfe9ffb0a893cc4c64\"><\/a>leuartDisable&nbsp;<\/td><td class=\"fielddoc\"><p>Disable both receiver and transmitter. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggac19b101f40ce0d0a0920f82abebc129ead058304ad29e701192766cc4e49e1408\"><\/a>leuartEnableRx&nbsp;<\/td><td class=\"fielddoc\"><p>Enable receiver only, transmitter disabled. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggac19b101f40ce0d0a0920f82abebc129ea82e5ffc6c326024c7031e5bf693d0691\"><\/a>leuartEnableTx&nbsp;<\/td><td class=\"fielddoc\"><p>Enable transmitter only, receiver disabled. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggac19b101f40ce0d0a0920f82abebc129eac956ad6908227bfad8d8e6fc8f3a1e28\"><\/a>leuartEnable&nbsp;<\/td><td class=\"fielddoc\"><p>Enable both receiver and transmitter. <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<a id=\"ga034badf61f0e439ce3a6cf4169f504c0\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga034badf61f0e439ce3a6cf4169f504c0\">◆&nbsp;<\/a><\/span>LEUART_Parity_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#ga034badf61f0e439ce3a6cf4169f504c0\" class=\"el\">LEUART_Parity_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Parity selection. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"gga034badf61f0e439ce3a6cf4169f504c0ab6b56c8573d563f42f28a56c4d0cfde1\"><\/a>leuartNoParity&nbsp;<\/td><td class=\"fielddoc\"><p>No parity. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga034badf61f0e439ce3a6cf4169f504c0a1a413b010f3c802d97e02c9ad2a6c59d\"><\/a>leuartEvenParity&nbsp;<\/td><td class=\"fielddoc\"><p>Even parity. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga034badf61f0e439ce3a6cf4169f504c0a493c2521d3fab0f83fda35d007045f05\"><\/a>leuartOddParity&nbsp;<\/td><td class=\"fielddoc\"><p>Odd parity. <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<a id=\"gaf748a72c90312181000bd33926390552\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaf748a72c90312181000bd33926390552\">◆&nbsp;<\/a><\/span>LEUART_Stopbits_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#gaf748a72c90312181000bd33926390552\" class=\"el\">LEUART_Stopbits_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Stop bits selection. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"ggaf748a72c90312181000bd33926390552ac78d418503337611c07ac11c1550cdb8\"><\/a>leuartStopbits1&nbsp;<\/td><td class=\"fielddoc\"><p>1 stop bits. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggaf748a72c90312181000bd33926390552ad83a4c3d5dd7a75eef2e627555971240\"><\/a>leuartStopbits2&nbsp;<\/td><td class=\"fielddoc\"><p>2 stop bits. <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<\/div>\n      <\/article>\n    ","url":"http://docs.silabs.com/gecko-platform/4.2/emlib/api/efr32xg12/group-leuart","status":"success"}
